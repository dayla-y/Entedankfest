Project Setup:
  ✔ create basic html page with minor css
  ✔ running project on local web server
  ✔ add phaser 3 library
  ✔ create a basic phaser 3 game instance
  ✔ add jsconfig to get phaser 3 types and intellisense

Battle System:
  ✔ load game assets
  ✔ create battle scene layout
  ✔ create dialog menu
  ✔ create option menu
  ✔ create ingredient attack move list
  ✔ handle player input
  ✔ code optimization - move logic to components
    ✔ create health component
    ✔ create background component
    ✔ create ingredient components
  ✔ adding basic attack logic
  ✔ taking damage and ingredient knock out
  ✔ battle state machine
    ✔ what is a finite state machine
    ✔ review the battle states and what each one represents
    ✔ implement each state
    ✔ add item, flee, and ingredient states
    ✔ player input improvements
  ✔ battle scene polish
    ✔ text animations
    ✔ ingredient animations
    ✔ skip animations
    ✔ attack animations
    ✔ scene transitions
    ✔ custom fonts

World Scene:
  ✔ load level background
  ✔ create player
  ☐ handle player input
  ☐ camera movement
  ☐ handle grid based movement
  ☐ handle collisions
  ☐ add wild ingredient encounter logic
  ☐ store player position in data manager

Level Development With Tiled:
  ☐ Basic level design concepts
  ☐ Add collision layer
  ☐ Add custom types to Tiled
  ☐ Add game objects
  ☐ Add npcs
  ☐ Exporting level images and JSON

World Scene Part 2:
  ☐ add interactive game objects
  ☐ dialog ui component
  ☐ add npcs
  ☐ add npc dialog
  ☐ add npc movement

Title Screen:
  ☐ create basic title screen
  ☐ add options menu
  ☐ save & loading options
  ☐ connecting option data to battle scene

Bug Fixes Part 1:
  ☐ battle scene - health bar value when battle starts
  ☐ health bar - animation when value of delay is provided
  ☐ battle scene - at battle start player can provide input
  ☐ world scene - player movement, handle when only sprite direction changes

Tools Part 1:
  ☐ using tweakpane for testing
    ☐ tweakpane basics
    ☐ positioning game objects
    ☐ ingredient attacks
    ☐ animations
  ☐ util function for moving game objects

Saving & Loading:
  ☐ add game menu with option to save game
  ☐ update menu scene with continue option to load game
  ☐ on new game, we should reset the player data (pos, ingredients, etc)

ingredient Party & ingredient Detail Scenes:
  ☐ create ingredient party scene
  ☐ allow player to select a ingredient in the scene
  ☐ create ingredient detail scene
  ☐ connect ingredient detail scene to ingredient party scene
  ☐ add game menu option for viewing ingredient party scene

Inventory:
  ☐ create class for items and inventory
  ☐ create ui screen for viewing items
  ☐ update menu to have view bag option
  ☐ update data manager to allow saving of inventory items
  ☐ update ui screen to allow player to use items

Battle Scene Part 2:
  ☐ using items
  ☐ running away
  ☐ enemy random attack
  ☐ player faint
  ☐ attacking order
  ☐ update data manager to persist ingredient data and current stats
  ☐ dynamic ingredient data based on player party and encounter

Audio:
  ☐ adding background music
  ☐ adding battle music
  ☐ adding attack effects
  ☐ connecting audio options to settings

World Scene Part 3:
  ☐ advanced wild ingredient encounter logic
  ☐ buildings
  ☐ items in the field
  ☐ npc event data structure
  ☐ respawn next to npc

Leveling & Experience:
  ☐ review math for leveling and exp gain
  ☐ update monseters json file and types to include exp info
  ☐ add new assets for exp bar
  ☐ refactor hp bar into re-usable class
  ☐ update battle scene to display exp bar
  ☐ update ingredient details scene to display exp bar
  ☐ gain exp when battle is over
    ☐ add new battle state for tracking
    ☐ new leveling utils for updates
    ☐ update ingredient classes to support
    ☐ update battle menu ui to have wordwrap

Multiple ingredients:
  ☐ load new assets
  ☐ battle scene
    ☐ battle ingredient class
      ☐ add support for switching ingredient details
    ☐ player battle ingredient class
      ☐ add support for switching ingredient details
      ☐ update deatch animation to hide health bar components
    ☐ battle menu
      ☐ update switch ingredient logic to align with flee attempt
    ☐ battle scene
      ☐ new state for switching ingredients and scene resume logic
      ☐ update existing states to support switching active ingredient
      ☐ update existing logic for switching ingredient when active ingredient is knocked out
      ☐ update logic tied to exp gain and message ordering
      ☐ add ui to show number of ingredients in party
    ☐ ingredient party scene
      ☐ add support for selecting ingredient for switching active ingredient during battle
  ☐ world scene
    ☐ refactor world menu into reusable component
    ☐ create confirmation sub menu
    ☐ switch ingredients positions in party
    ☐ release ingredient into the wild

Catching ingredients:
  ☐ review feature and load assets
  ☐ item and ingredient model updates
    ☐ add category to items
    ☐ add new item type for capture
    ☐ update ingredient id field to be a string
    ☐ add new item to json data
    ☐ add new item to data manager
  ☐ create ball class
    ☐ test new animations in test scene
    ☐ add new animations to battle ingredient class
  ☐ inventory scene
    ☐ support for capture items
    ☐ safe guard if ingredient party is full
  ☐ battle menu
    ☐ support to get used item details
  ☐ battle scene
    ☐ new battle states for using items
    ☐ new battle state for catching ingredient with stubbed logic
  ☐ review ingredient catching logic

Cutscenes & In Game Events:
  ☐ update npc animation logic
    ☐ add new npc animations to animation json file
    ☐ update npc json file to support animation key prefix
    ☐ update npc class to support animation prefix
  ☐ update map data
    ☐ update tilemap to show event areas
    ☐ update world scene to create event zone areas
    ☐ update world scene update logic to check for overlaps with event zones
  ☐ story events
    ☐ create events json file for cutscenes
    ☐ add events data types
    ☐ update data utils for parsing events data
    ☐ update data manager for viewed events
    ☐ update npc class to support custom movement path
    ☐ update world scene to handle custom events
  ☐ story flags
    ☐ update data manager for story flags
    ☐ update npc json file to support required story flags
    ☐ update events json file to support setting and removing flags
    ☐ add data types for story flags
  ☐ cutscenes
    ☐ create new cutscene class and trigger from world scene
    ☐ update dialog ui to be a new scene